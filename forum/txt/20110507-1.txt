http://ai.obrazec.ru/forum/viewtopic.php?p=28703#p28703
[quote="vchc"]Вы поступаете методологически некорректно. Сначала создаёте какую-то реализацию без чётких требований к ней, то есть ваше ядро, а потом предполагаете, что эта структура будет кем-то для чего-то использоваться. Это прямой путь не туда )) Эту структуру прежде всего должны использовать мы сами для решения наших задач. Так вот пока задачи не описаны, структура не имеет ценности.[/quote]
Признаться меня удивили такие вопросы. Сейчас перечитал свои сообщения в этой ветке и понял, что описывая проект AIKernel нигде не написал главного. А именно вот что: я планирую проект AIKernel не как конечный продукт для пользователей, а лишь как "набор разработчика", toolkit, SDK. Это делается в первую очередь для того, чтобы разобраться самому в различных подходах и выделения общих вещей для различных подходов создания ИИ и ИР. Это "главное" и должно, по моему мнению, попасть в ядро ИИ системы и лечь в основу дальнейших разработок. При этом "модули" в AIKernel могут решать совершенно разные задачи, но должно быть что-то, что их объединит.

Лично мне, на данный момент, интересно было бы заняться CLIPS. Хочу научиться компилировать его в виде DLL с возможностью использования в качестве одного из "модулей". Это то, что интересует меня в данный момент. Каждый должен выбрать для себя что ему интересно. И заняться реализацией. Но, при этом, давать другим разработчикам возможность использования уже реализованного функционала. Иначе получится "еще один проект" реализации ИИ. Вместо того, чтобы кидаться реализовывать очередную программку, я предлагаю сначала определиться с правилами как нужно писать код, на каком языке, под какой лицензией, какие основные типы данных использовать и другие фундаментальные вопросы.

Лично для себя, в своих проектах, я боле или менее определится с этими вопросами. Теперь я пытаюсь понять правильный выбор я сделал или нет. Например я пришел к выводу, что в любом языке нужно стараться писать наименования типов, функций и переменных в виде, когда каждая первая буква пишется с большой буквы:[code]String; ToInteger; IsStatic; IntToStr;[/code]
Так же определил для себя базовые типы, которые не зависят от языка реализации:
[code]AInteger;AFloat;AString;AID;AVersion;[/code]
Это все может показаться совсем не важным на первый взгляд, но читать и разбираться в чужом коде, когда он написан абы как нет никакого удовольствия. А если мы говорим про совместную работу, то это придется делать постоянно. Но я не собираюсь навязывать свое мнение, т.к. сам точно не знаю как более правильно. Я думаю вопросы по базовым типам, принципам наименования типов, функций и переменных можно отложить на потом, а пока попробовать начать реализацию первого "модуля". Нужно только определиться с направлением, выбрать ту или иную технологию за основу разработки.

Как на счет заняться онтологиями? Я думаю эта тема будет интересна многим. В частности "модуль" онтологий, на мой взгляд, должен обеспечивать некоторый API для выборки, поиска и некоторой обработки классов, индивидов, и их связей (триплетов). "Модуль" онтологий может работать с какой-либо SQL БД или с XML файлом или хранить все данные в оперативной памяти.
Одновременно можно заняться реализацией "модулем" логического вывода онтологических знаний.
Для минимальной функциональности и для работы с БЗ так же потребуется редактор знаний. Для этого можно начать еще один "модуль" - редактор онтологий, или принять какой-то существующий редактор.

Если вести реализацию в рамках проекта AIKernel, то брать проекты, реализованные с использованием виртуальных машин лучше не стоит. Однако можно попробовать переписать Java реализацию на С++ или на Delphi. Заодно разобраться какие классы приняты в том или ином проекте и почему, какие алгоритмы используются и т.д. Например, можно взять проект Jena и разобраться что там и как.
